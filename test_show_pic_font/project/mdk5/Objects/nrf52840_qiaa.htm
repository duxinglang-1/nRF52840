<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\nrf52840_qiaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\nrf52840_qiaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Apr 14 09:29:14 2020
<BR><P>
<H3>Maximum Stack Usage =        616 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; test_show_analog_clock &rArr; idle_show_time &rArr; idle_show_digital_clock &rArr; LCD_ShowString &rArr; LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[a4]">nrf_log_frontend_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">nrf_log_frontend_std_0</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[5]">BusFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1a]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1e]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[33]">CRYPTOCELL_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[19]">ECB_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2f]">FPU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[11]">GPIOTE_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2e]">I2S_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[29]">MWU_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[4]">MemoryManagement_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[10]">NFCT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[28]">PDM_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[b]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[27]">PWM0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2a]">PWM1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2b]">PWM2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[34]">PWM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1d]">QDEC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[32]">QSPI_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[c]">RADIO_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[18]">RNG_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[16]">RTC0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1c]">RTC1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2d]">RTC2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[12]">SAADC_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_spi.o(.constdata)
 <LI><a href="#[e]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[f]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[2c]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[35]">SPIM3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1f]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[20]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[21]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[22]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[23]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[24]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_nrf52840.o(i.SystemInit) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[17]">TEMP_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[13]">TIMER0_IRQHandler</a> from nrfx_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[14]">TIMER1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[15]">TIMER2_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[25]">TIMER3_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[26]">TIMER4_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[d]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[31]">UARTE1_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[30]">USBD_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[1b]">WDT_IRQHandler</a> from arm_startup_nrf52840.o(.text) referenced from arm_startup_nrf52840.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52840.o(.text)
 <LI><a href="#[39]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[5e]">backend_name_get</a> from nrf_log_frontend.o(i.backend_name_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[5a]">log_backend_ctrl</a> from nrf_log_frontend.o(i.log_backend_ctrl) referenced 2 times from nrf_log_frontend.o(.constdata)
 <LI><a href="#[5b]">log_backend_go</a> from nrf_log_frontend.o(i.log_backend_go) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[5c]">log_backend_halt</a> from nrf_log_frontend.o(i.log_backend_halt) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[5d]">log_backend_status</a> from nrf_log_frontend.o(i.log_backend_status) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[66]">log_cmd</a> from nrf_log_frontend.o(i.log_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[64]">log_cmd_backends_list</a> from nrf_log_frontend.o(i.log_cmd_backends_list) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[5f]">log_config_load_cmd</a> from nrf_log_frontend.o(i.log_config_load_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[60]">log_config_store_cmd</a> from nrf_log_frontend.o(i.log_config_store_cmd) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[3a]">log_ctrl</a> from nrf_log_frontend.o(i.log_ctrl) referenced from nrf_log_frontend.o(i.log_backend_ctrl)
 <LI><a href="#[3b]">log_go</a> from nrf_log_frontend.o(i.log_go) referenced from nrf_log_frontend.o(i.log_backend_go)
 <LI><a href="#[3c]">log_halt</a> from nrf_log_frontend.o(i.log_halt) referenced from nrf_log_frontend.o(i.log_backend_halt)
 <LI><a href="#[61]">log_self_ctrl</a> from nrf_log_frontend.o(i.log_self_ctrl) referenced 2 times from nrf_log_frontend.o(.constdata)
 <LI><a href="#[62]">log_self_go</a> from nrf_log_frontend.o(i.log_self_go) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[63]">log_self_halt</a> from nrf_log_frontend.o(i.log_self_halt) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[65]">log_self_status</a> from nrf_log_frontend.o(i.log_self_status) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[3d]">log_status</a> from nrf_log_frontend.o(i.log_status) referenced from nrf_log_frontend.o(i.log_backend_status)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[58]">module_name_get</a> from nrf_log_frontend.o(i.module_name_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[53]">nrf_balloc_status</a> from nrf_balloc.o(i.nrf_balloc_status) referenced 2 times from nrf_balloc.o(.constdata)
 <LI><a href="#[4f]">nrf_cli_cmd_clear</a> from nrf_cli.o(i.nrf_cli_cmd_clear) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[50]">nrf_cli_cmd_cli</a> from nrf_cli.o(i.nrf_cli_cmd_cli) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[4d]">nrf_cli_cmd_cli_stats</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[49]">nrf_cli_cmd_cli_stats_reset</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats_reset) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[4a]">nrf_cli_cmd_cli_stats_show</a> from nrf_cli.o(i.nrf_cli_cmd_cli_stats_show) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[4b]">nrf_cli_cmd_colors</a> from nrf_cli.o(i.nrf_cli_cmd_colors) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[45]">nrf_cli_cmd_colors_off</a> from nrf_cli.o(i.nrf_cli_cmd_colors_off) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[46]">nrf_cli_cmd_colors_on</a> from nrf_cli.o(i.nrf_cli_cmd_colors_on) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[4c]">nrf_cli_cmd_echo</a> from nrf_cli.o(i.nrf_cli_cmd_echo) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[47]">nrf_cli_cmd_echo_off</a> from nrf_cli.o(i.nrf_cli_cmd_echo_off) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[48]">nrf_cli_cmd_echo_on</a> from nrf_cli.o(i.nrf_cli_cmd_echo_on) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[51]">nrf_cli_cmd_history</a> from nrf_cli.o(i.nrf_cli_cmd_history) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[52]">nrf_cli_cmd_resize</a> from nrf_cli.o(i.nrf_cli_cmd_resize) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[4e]">nrf_cli_cmd_resize_default</a> from nrf_cli.o(i.nrf_cli_cmd_resize_default) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[44]">nrf_log_backend_cli_flush</a> from nrf_cli.o(i.nrf_log_backend_cli_flush) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[43]">nrf_log_backend_cli_panic_set</a> from nrf_cli.o(i.nrf_log_backend_cli_panic_set) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[42]">nrf_log_backend_cli_put</a> from nrf_cli.o(i.nrf_log_backend_cli_put) referenced from nrf_cli.o(.constdata)
 <LI><a href="#[57]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[56]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[55]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[54]">nrf_queue_status</a> from nrf_queue.o(i.nrf_queue_status) referenced 2 times from nrf_queue.o(.constdata)
 <LI><a href="#[3f]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[59]">severity_lvl_get</a> from nrf_log_frontend.o(i.severity_lvl_get) referenced from nrf_log_frontend.o(.constdata)
 <LI><a href="#[40]">spi_event_handler</a> from lcd_lh096tig11g_st7735sv.o(i.spi_event_handler) referenced from lcd_lh096tig11g_st7735sv.o(i.spi_init)
 <LI><a href="#[3e]">spi_evt_handler</a> from nrf_drv_spi.o(i.spi_evt_handler) referenced from nrf_drv_spi.o(i.nrf_drv_spi_init)
 <LI><a href="#[41]">timer_clock_event_handler</a> from main.o(i.timer_clock_event_handler) referenced from main.o(i.timer_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[142]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[143]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[144]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[145]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[146]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ff]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>

<P><STRONG><a name="[100]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>

<P><STRONG><a name="[fe]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>

<P><STRONG><a name="[147]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[fd]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[102]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[148]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[149]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CRYPTOCELL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UARTE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52840.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[14a]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAnalogPic
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_analog_clock
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemDateTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[84]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MeasureString
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
</UL>

<P><STRONG><a name="[ab]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_find
</UL>

<P><STRONG><a name="[d9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
</UL>

<P><STRONG><a name="[e5]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_get
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[152]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>BlockWrite</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcd_lh096tig11g_st7735sv.o(i.BlockWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_dis_pic_offset_rotate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_dis_pic
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_time
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[76]"></a>CheckSystemDateTimeIsValid</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, datetime.o(i.CheckSystemDateTimeIsValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckSystemDateTimeIsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemDateTime
</UL>

<P><STRONG><a name="[81]"></a>Delay</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lcd_lh096tig11g_st7735sv.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[70]"></a>DrawAnalogPic</STRONG> (Thumb, 644 bytes, Stack size 128 bytes, main.o(i.DrawAnalogPic))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = DrawAnalogPic &rArr; LCD_dis_pic_offset_rotate &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_get_pic_size
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_dis_pic_offset_rotate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_analog_clock
</UL>

<P><STRONG><a name="[75]"></a>GetSystemDateTime</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, datetime.o(i.GetSystemDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetSystemDateTime &rArr; SetSystemDateTime &rArr; nrf_nvmc_write_bytes &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemDateTime
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWeekDayByDate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSystemDateTimeIsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_show_analog_clock
</UL>

<P><STRONG><a name="[77]"></a>GetWeekDayByDate</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, datetime.o(i.GetWeekDayByDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetWeekDayByDate
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemDateTime
</UL>

<P><STRONG><a name="[79]"></a>LCD_Clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lcd_lh096tig11g_st7735sv.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LCD_Clear &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_clock_background
</UL>

<P><STRONG><a name="[7c]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChineseChar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[73]"></a>LCD_Fill</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lcd.o(i.LCD_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = LCD_Fill &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAnalogPic
</UL>

<P><STRONG><a name="[7e]"></a>LCD_Init</STRONG> (Thumb, 582 bytes, Stack size 8 bytes, lcd_lh096tig11g_st7735sv.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = LCD_Init &rArr; LCD_Clear &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>LCD_MeasureString</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lcd.o(i.LCD_MeasureString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_MeasureString
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
</UL>

<P><STRONG><a name="[d5]"></a>LCD_SetFontSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(i.LCD_SetFontSize))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_clock_background
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_analog_clock
</UL>

<P><STRONG><a name="[85]"></a>LCD_ShowChar</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[86]"></a>LCD_ShowChineseChar</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowChineseChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[87]"></a>LCD_ShowString</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChineseChar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
</UL>

<P><STRONG><a name="[88]"></a>LCD_dis_pic</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lcd.o(i.LCD_dis_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = LCD_dis_pic &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_clock_background
</UL>

<P><STRONG><a name="[74]"></a>LCD_dis_pic_offset_rotate</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, lcd.o(i.LCD_dis_pic_offset_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LCD_dis_pic_offset_rotate &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAnalogPic
</UL>

<P><STRONG><a name="[72]"></a>LCD_get_pic_size</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lcd.o(i.LCD_get_pic_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_get_pic_size
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAnalogPic
</UL>

<P><STRONG><a name="[89]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
</UL>

<P><STRONG><a name="[e]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_spi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spi.o(.constdata)
<LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SetSystemDateTime</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, datetime.o(i.SetSystemDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetSystemDateTime &rArr; nrf_nvmc_write_bytes &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_bytes
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemDateTime
</UL>

<P><STRONG><a name="[98]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52840.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, system_nrf52840.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_98
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_120
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_115
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_103
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER0_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52840.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>WriteComm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_lh096tig11g_st7735sv.o(i.WriteComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WriteComm &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
</UL>

<P><STRONG><a name="[6f]"></a>WriteData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_lh096tig11g_st7735sv.o(i.WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
</UL>

<P><STRONG><a name="[7d]"></a>WriteOneDot</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_lh096tig11g_st7735sv.o(i.WriteOneDot))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = WriteOneDot &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_dis_pic_offset_rotate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_dis_pic
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[7b]"></a>Write_Data</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, lcd_lh096tig11g_st7735sv.o(i.Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneDot
</UL>

<P><STRONG><a name="[9d]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[155]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[d6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_analog_clock
</UL>

<P><STRONG><a name="[156]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[157]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[158]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a2]"></a>app_error_fault_handler</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[9b]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>

<P><STRONG><a name="[a6]"></a>app_util_critical_region_enter</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[a8]"></a>app_util_critical_region_exit</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[a7]"></a>app_util_disable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[a9]"></a>app_util_enable_irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[ae]"></a>bsp_board_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_board_init &rArr; bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[b2]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[11c]"></a>buffer_is_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[d4]"></a>idle_show_analog_clock</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, main.o(i.idle_show_analog_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = idle_show_analog_clock &rArr; DrawAnalogPic &rArr; LCD_dis_pic_offset_rotate &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFontSize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawAnalogPic
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_time
</UL>

<P><STRONG><a name="[d7]"></a>idle_show_clock_background</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.idle_show_clock_background))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = idle_show_clock_background &rArr; LCD_dis_pic &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_dis_pic
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFontSize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_show_analog_clock
</UL>

<P><STRONG><a name="[d8]"></a>idle_show_digital_clock</STRONG> (Thumb, 606 bytes, Stack size 112 bytes, main.o(i.idle_show_digital_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = idle_show_digital_clock &rArr; LCD_ShowString &rArr; LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFontSize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MeasureString
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_time
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = main &rArr; test_show_analog_clock &rArr; idle_show_time &rArr; idle_show_digital_clock &rArr; LCD_ShowString &rArr; LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_show_analog_clock
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_time
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_voltage_setup_3v3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[ed]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_clear_fetch &rArr; nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_and
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[eb]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[b4]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[fb]"></a>nrf_atomic_u32_fetch_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_and
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[ce]"></a>nrf_atomic_u32_fetch_store</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>

<P><STRONG><a name="[fc]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[101]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[103]"></a>nrf_balloc_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_idx2block
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[105]"></a>nrf_balloc_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_block2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[4d]"></a>nrf_cli_cmd_cli_stats</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_cli_cmd_cli_stats &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>nrf_cli_cmd_cli_stats_reset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_cli_cmd_cli_stats_reset &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>nrf_cli_cmd_cli_stats_show</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_cli.o(i.nrf_cli_cmd_cli_stats_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_cli_cmd_cli_stats_show &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>nrf_cli_fprintf</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_cli.o(i.nrf_cli_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_colors_restore
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_color_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_status
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_show
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd_backends_list
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[e4]"></a>nrf_cli_help_print</STRONG> (Thumb, 720 bytes, Stack size 72 bytes, nrf_cli.o(i.nrf_cli_help_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_status
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd_backends_list
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[110]"></a>nrf_drv_spi_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[b9]"></a>nrf_fprintf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_color_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_bgcolor_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[b7]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_buffer_flush
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[10e]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>

<P><STRONG><a name="[11b]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 242 bytes, Stack size 112 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[13a]"></a>nrf_log_color_id_get</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[a4]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 794 bytes, Stack size 80 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[11f]"></a>nrf_log_frontend_hexdump</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.nrf_log_frontend_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_log_frontend_hexdump &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
</UL>

<P><STRONG><a name="[a5]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_event_handler
</UL>

<P><STRONG><a name="[c3]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[e8]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_get
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[ee]"></a>nrf_log_module_filter_get</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.nrf_log_module_filter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_filter_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
</UL>

<P><STRONG><a name="[f9]"></a>nrf_log_module_filter_set</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_module_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_filter_set &rArr; higher_lvl_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;higher_lvl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_filter_set
</UL>

<P><STRONG><a name="[e7]"></a>nrf_log_module_name_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_name_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_get
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[a3]"></a>nrf_log_panic</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[c2]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[11d]"></a>nrf_memobj_alloc</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[124]"></a>nrf_memobj_free</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[11a]"></a>nrf_memobj_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_memobj_get &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[bc]"></a>nrf_memobj_put</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[c1]"></a>nrf_memobj_read</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_memobj_read &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[11e]"></a>nrf_memobj_write</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_memobj_write &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[8f]"></a>nrf_nvmc_page_erase</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, nrf_nvmc.o(i.nrf_nvmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_nvmc_page_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemDateTime
</UL>

<P><STRONG><a name="[126]"></a>nrf_nvmc_write_byte</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nrf_nvmc.o(i.nrf_nvmc_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_flash_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_bytes
</UL>

<P><STRONG><a name="[90]"></a>nrf_nvmc_write_bytes</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_nvmc.o(i.nrf_nvmc_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_nvmc_write_bytes &rArr; nrf_nvmc_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSystemDateTime
</UL>

<P><STRONG><a name="[bb]"></a>nrf_queue_generic_pop</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_generic_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_queue_generic_pop &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_flush
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[127]"></a>nrf_queue_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[129]"></a>nrf_queue_is_full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_queue_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[10a]"></a>nrf_queue_max_utilization_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_max_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_show
</UL>

<P><STRONG><a name="[109]"></a>nrf_queue_max_utilization_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_max_utilization_reset))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_reset
</UL>

<P><STRONG><a name="[119]"></a>nrf_queue_push</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_queue_push &rArr; nrf_queue_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
</UL>

<P><STRONG><a name="[12b]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_queue_utilization_get &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_status
</UL>

<P><STRONG><a name="[12c]"></a>nrfx_prs_acquire</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>

<P><STRONG><a name="[111]"></a>nrfx_spi_init</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, nrfx_spi.o(i.nrfx_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nrfx_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[9a]"></a>nrfx_spi_xfer</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrfx_spi.o(i.nrfx_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_spi_xfer &rArr; spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Data
</UL>

<P><STRONG><a name="[131]"></a>nrfx_timer_compare</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[134]"></a>nrfx_timer_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_show_analog_clock
</UL>

<P><STRONG><a name="[136]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[138]"></a>nrfx_timer_init</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[40]"></a>spi_event_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lcd_lh096tig11g_st7735sv.o(i.spi_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = spi_event_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_lh096tig11g_st7735sv.o(i.spi_init)
</UL>
<P><STRONG><a name="[80]"></a>spi_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lcd_lh096tig11g_st7735sv.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = spi_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[41]"></a>timer_clock_event_handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.timer_clock_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.timer_init)
</UL>
<P><STRONG><a name="[13f]"></a>timer_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, main.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = timer_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_show_analog_clock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ef]"></a>gpio_output_voltage_setup_3v3</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(i.gpio_output_voltage_setup_3v3))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>idle_show_time</STRONG> (Thumb, 718 bytes, Stack size 16 bytes, main.o(i.idle_show_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = idle_show_time &rArr; idle_show_digital_clock &rArr; LCD_ShowString &rArr; LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockWrite
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_digital_clock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_analog_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_show_analog_clock
</UL>

<P><STRONG><a name="[f7]"></a>nrf_delay_ms</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, main.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[f0]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[f4]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>test_show_analog_clock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.test_show_analog_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = test_show_analog_clock &rArr; idle_show_time &rArr; idle_show_digital_clock &rArr; LCD_ShowString &rArr; LCD_ShowChineseChar &rArr; LCD_Fast_DrawPoint &rArr; BlockWrite &rArr; WriteData &rArr; Write_Data &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_std_0 &rArr; std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemDateTime
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_clock_background
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_show_time
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>bsp_board_buttons_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, boards.o(i.bsp_board_buttons_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_buttons_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[af]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_board_leds_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[ad]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_buttons_init
</UL>

<P><STRONG><a name="[113]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[b1]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[f8]"></a>memobj_op</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[b8]"></a>cli_clear_eos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_clear_eos))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cli_clear_eos &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[10b]"></a>cli_flag_echo_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_cli.o(i.cli_flag_echo_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
</UL>

<P><STRONG><a name="[ba]"></a>cli_log_entry_process</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, nrf_cli.o(i.cli_log_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = cli_log_entry_process &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_clear_eos
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_put
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_cli_flush
</UL>

<P><STRONG><a name="[c4]"></a>cli_putc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_cli.o(i.cli_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cli_putc &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[cb]"></a>cli_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, nrf_cli.o(i.cli_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cli_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
</UL>

<P><STRONG><a name="[c5]"></a>cli_strlen</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_cli.o(i.cli_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cli_strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiline_console_data_check
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[d3]"></a>cli_write</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, nrf_cli.o(i.cli_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cli_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
</UL>

<P><STRONG><a name="[c6]"></a>cmd_get</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrf_cli.o(i.cmd_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_get &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[c7]"></a>cursor_down_move</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_down_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cursor_down_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
</UL>

<P><STRONG><a name="[bf]"></a>cursor_left_move</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_left_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cursor_left_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[c8]"></a>cursor_next_line_move</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_cli.o(i.cursor_next_line_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cursor_next_line_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[c9]"></a>cursor_position_get</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, nrf_cli.o(i.cursor_position_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = cursor_position_get &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_buffer_flush
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
</UL>

<P><STRONG><a name="[cc]"></a>cursor_right_move</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_right_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[be]"></a>cursor_up_move</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_cli.o(i.cursor_up_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = cursor_up_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[d1]"></a>format_offset_string_print</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, nrf_cli.o(i.format_offset_string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = format_offset_string_print &rArr; cursor_right_move &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transport_buffer_flush
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_next_line_move
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>

<P><STRONG><a name="[bd]"></a>multiline_console_data_check</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_cli.o(i.multiline_console_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = multiline_console_data_check &rArr; cli_strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
</UL>

<P><STRONG><a name="[107]"></a>nrf_cli_build_in_cmd_common_executed</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_build_in_cmd_common_executed))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize_default
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_history
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo_on
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo_off
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_echo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors_on
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors_off
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_colors
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_show
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats_reset
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli_stats
</UL>

<P><STRONG><a name="[4f]"></a>nrf_cli_cmd_clear</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_cli_cmd_clear &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>nrf_cli_cmd_cli</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_cli))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_cli_cmd_cli &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>nrf_cli_cmd_colors</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_colors))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_cli_cmd_colors &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>nrf_cli_cmd_colors_off</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_colors_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_cli_cmd_colors_off &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>nrf_cli_cmd_colors_on</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_colors_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_cli_cmd_colors_on &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>nrf_cli_cmd_echo</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_cli_cmd_echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = nrf_cli_cmd_echo &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_flag_echo_is_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>nrf_cli_cmd_echo_off</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_echo_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_cli_cmd_echo_off &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>nrf_cli_cmd_echo_on</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_echo_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_cli_cmd_echo_on &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>nrf_cli_cmd_history</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, nrf_cli.o(i.nrf_cli_cmd_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_cli_cmd_history &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>nrf_cli_cmd_resize</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_cli_cmd_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_cli_cmd_resize &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminal_size_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>nrf_cli_cmd_resize_default</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_cli_cmd_resize_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_cli_cmd_resize_default &rArr; nrf_cli_build_in_cmd_common_executed &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>nrf_cli_help_requested</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_cli.o(i.nrf_cli_help_requested))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_cli
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_clear
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_build_in_cmd_common_executed
</UL>

<P><STRONG><a name="[44]"></a>nrf_log_backend_cli_flush</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf_cli.o(i.nrf_log_backend_cli_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = nrf_log_backend_cli_flush &rArr; cli_log_entry_process &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>nrf_log_backend_cli_panic_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_cli.o(i.nrf_log_backend_cli_panic_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_backend_cli_panic_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>nrf_log_backend_cli_put</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, nrf_cli.o(i.nrf_log_backend_cli_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_cli_put &rArr; cli_log_entry_process &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_log_entry_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_cli.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>terminal_size_get</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nrf_cli.o(i.terminal_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = terminal_size_get &rArr; cursor_position_get &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_up_move
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_right_move
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_left_move
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_down_move
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_cmd_resize
</UL>

<P><STRONG><a name="[ca]"></a>transport_buffer_flush</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_cli.o(i.transport_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transport_buffer_flush &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_offset_string_print
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_position_get
</UL>

<P><STRONG><a name="[140]"></a>vt100_bgcolor_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_cli.o(i.vt100_bgcolor_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vt100_bgcolor_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_colors_restore
</UL>

<P><STRONG><a name="[10d]"></a>vt100_color_set</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_cli.o(i.vt100_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_colors_restore
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>

<P><STRONG><a name="[10f]"></a>vt100_colors_restore</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_cli.o(i.vt100_colors_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_color_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vt100_bgcolor_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>

<P><STRONG><a name="[b6]"></a>buffer_add</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_print
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[db]"></a>int_print</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[112]"></a>string_print</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, nrf_fprintf_format.o(i.string_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = string_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[dc]"></a>unsigned_print</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[106]"></a>nrf_balloc_block2idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_block2idx))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>

<P><STRONG><a name="[104]"></a>nrf_balloc_idx2block</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_balloc.o(i.nrf_balloc_idx2block))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
</UL>

<P><STRONG><a name="[53]"></a>nrf_balloc_status</STRONG> (Thumb, 200 bytes, Stack size 88 bytes, nrf_balloc.o(i.nrf_balloc_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = nrf_balloc_status &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_balloc.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>nrf_queue_next_idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_generic_pop
</UL>

<P><STRONG><a name="[54]"></a>nrf_queue_status</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, nrf_queue.o(i.nrf_queue_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = nrf_queue_status &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_max_utilization_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_queue.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>queue_utilization_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[82]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_lh096tig11g_st7735sv.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteComm
</UL>

<P><STRONG><a name="[117]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd_lh096tig11g_st7735sv.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_range_cfg_output
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>

<P><STRONG><a name="[7a]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd_lh096tig11g_st7735sv.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOneDot
</UL>

<P><STRONG><a name="[7f]"></a>nrf_gpio_range_cfg_output</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, lcd_lh096tig11g_st7735sv.o(i.nrf_gpio_range_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_range_cfg_output
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[125]"></a>wait_for_flash_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_nvmc.o(i.wait_for_flash_ready))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
</UL>

<P><STRONG><a name="[99]"></a>irq_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[de]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[df]"></a>nrf_timer_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[133]"></a>nrf_timer_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[132]"></a>nrf_timer_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[137]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[135]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
</UL>

<P><STRONG><a name="[139]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
</UL>

<P><STRONG><a name="[12d]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[cf]"></a>finish_transfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = finish_transfer &rArr; nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[8d]"></a>irq_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_spi.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>nrf_gpio_cfg</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, nrfx_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[116]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>

<P><STRONG><a name="[118]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_xfer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>

<P><STRONG><a name="[115]"></a>nrf_gpio_pin_port_decode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_spi.o(i.nrf_gpio_pin_port_decode))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>

<P><STRONG><a name="[d0]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrfx_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_port_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[e0]"></a>nrf_spi_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_spi.o(i.nrf_spi_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[13c]"></a>nrf_spi_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spi.o(i.nrf_spi_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[12e]"></a>nrf_spi_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spi.o(i.nrf_spi_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[13d]"></a>nrf_spi_txd_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_spi.o(i.nrf_spi_txd_set))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[12f]"></a>nrfx_get_irq_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_spi.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_init
</UL>

<P><STRONG><a name="[130]"></a>spi_xfer</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nrfx_spi.o(i.spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_int_disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_event_clear
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spi_xfer
</UL>

<P><STRONG><a name="[e1]"></a>transfer_byte</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrfx_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spi_txd_set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[3e]"></a>spi_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.spi_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[57]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>serial_tx</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[aa]"></a>backend_find</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.backend_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = backend_find &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>

<P><STRONG><a name="[5e]"></a>backend_name_get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.backend_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = backend_name_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>buf_prealloc</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[cd]"></a>dropped_sat16_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.dropped_sat16_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_store
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_hexdump
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
</UL>

<P><STRONG><a name="[123]"></a>higher_lvl_get</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.higher_lvl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = higher_lvl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_set
</UL>

<P><STRONG><a name="[ec]"></a>invalid_packets_omit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.invalid_packets_omit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[5a]"></a>log_backend_ctrl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_backend_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = log_backend_ctrl &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>log_backend_go</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_backend_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = log_backend_go &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>log_backend_halt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_backend_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = log_backend_halt &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>log_backend_status</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_backend_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = log_backend_status &rArr; nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_backend_cmd_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>log_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.log_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = log_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>log_cmd_backends_list</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_cmd_backends_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = log_cmd_backends_list &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>log_config_load_cmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_config_load_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = log_config_load_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>log_config_store_cmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_config_store_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = log_config_store_cmd &rArr; nrf_cli_help_print &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_help_requested
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>log_ctrl</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.log_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = log_ctrl &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_get
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_id_filter_set
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_self_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_ctrl)
</UL>
<P><STRONG><a name="[3b]"></a>log_go</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.log_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = log_go
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_self_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_go)
</UL>
<P><STRONG><a name="[3c]"></a>log_halt</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.log_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = log_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_self_halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_halt)
</UL>
<P><STRONG><a name="[61]"></a>log_self_ctrl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_self_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = log_self_ctrl &rArr; log_ctrl &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>log_self_go</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_self_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = log_self_go &rArr; log_go
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_go
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>log_self_halt</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_self_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = log_self_halt &rArr; log_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>log_self_status</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.log_self_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = log_self_status &rArr; log_status &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>log_skip</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalid_packets_omit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[3d]"></a>log_status</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, nrf_log_frontend.o(i.log_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = log_status &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_self_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(i.log_backend_status)
</UL>
<P><STRONG><a name="[e6]"></a>module_id_filter_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.module_id_filter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = module_id_filter_set &rArr; nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_set
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[e9]"></a>module_id_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.module_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = module_id_get &rArr; nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_ctrl
</UL>

<P><STRONG><a name="[fa]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>

<P><STRONG><a name="[58]"></a>module_name_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = module_name_get &rArr; nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>nrf_cli_backend_cmd_execute</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.nrf_cli_backend_cmd_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = nrf_cli_backend_cmd_execute &rArr; nrf_cli_fprintf &rArr; vt100_colors_restore &rArr; vt100_color_set &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_cli_fprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backend_find
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_status
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_halt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_go
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_backend_ctrl
</UL>

<P><STRONG><a name="[e3]"></a>nrf_cli_help_requested</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_cli_help_requested))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_store_cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_config_load_cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd_backends_list
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_cmd
</UL>

<P><STRONG><a name="[ea]"></a>nrf_log_backend_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_backend_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_go
</UL>

<P><STRONG><a name="[59]"></a>severity_lvl_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.severity_lvl_get))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_frontend.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>std_header_set</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std_header_set &rArr; dropped_sat16_get &rArr; nrf_atomic_u32_fetch_store
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dropped_sat16_get
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[120]"></a>std_n</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = std_n &rArr; nrf_log_frontend_dequeue &rArr;  nrf_log_frontend_std_0 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_header_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[122]"></a>postfix_process</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[121]"></a>prefix_process</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timestamp_print
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[13b]"></a>timestamp_print</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_str_formatter.o(i.timestamp_print))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[8a]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[8c]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[8b]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[94]"></a>errata_103</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_103))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[95]"></a>errata_115</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_115))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[96]"></a>errata_120</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_120))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[97]"></a>errata_136</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[91]"></a>errata_36</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[92]"></a>errata_66</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[93]"></a>errata_98</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_nrf52840.o(i.errata_98))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9e]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[a1]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
